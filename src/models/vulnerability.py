"""
Vulnerability data models for DefenSys.

This module defines the core data structures for representing vulnerabilities
and security issues detected by the scanner.
"""

from dataclasses import dataclass, field
from enum import Enum
from typing import List, Dict, Any, Optional
from datetime import datetime


class Severity(Enum):
    """Vulnerability severity levels."""
    CRITICAL = "critical"
    HIGH = "high"
    MEDIUM = "medium"
    LOW = "low"
    INFO = "info"


class VulnerabilityType(Enum):
    """Types of vulnerabilities that can be detected."""
    SQL_INJECTION = "sql_injection"
    XSS = "cross_site_scripting"
    CSRF = "cross_site_request_forgery"
    AUTHENTICATION = "authentication_issue"
    AUTHORIZATION = "authorization_issue"
    CRYPTOGRAPHIC = "cryptographic_issue"
    INPUT_VALIDATION = "input_validation"
    CONFIGURATION = "configuration_issue"
    DEPENDENCY = "dependency_vulnerability"
    LOGGING = "logging_issue"
    SESSION_MANAGEMENT = "session_management"
    FILE_UPLOAD = "file_upload_vulnerability"
    DESERIALIZATION = "deserialization"
    XXE = "xml_external_entity"
    SSRF = "server_side_request_forgery"
    LDAP_INJECTION = "ldap_injection"
    COMMAND_INJECTION = "command_injection"
    PATH_TRAVERSAL = "path_traversal"
    BUSINESS_LOGIC = "business_logic_flaw"


@dataclass
class CodeLocation:
    """Represents a location in source code."""
    file_path: str
    line_number: int
    column_number: int
    function_name: Optional[str] = None
    class_name: Optional[str] = None


@dataclass
class FixSuggestion:
    """Suggests how to fix a vulnerability."""
    description: str
    code_example: Optional[str] = None
    documentation_url: Optional[str] = None
    confidence: float = 0.0  # 0.0 to 1.0


@dataclass
class Vulnerability:
    """
    Represents a security vulnerability found in the code.
    
    This is the core data structure for representing vulnerabilities
    detected by DefenSys.
    """
    
    # Core identification
    vulnerability_type: VulnerabilityType
    severity: Severity
    title: str
    description: str
    
    # Location information
    location: CodeLocation
    
    # Technical details
    cwe_id: Optional[str] = None  # Common Weakness Enumeration ID
    cve_id: Optional[str] = None  # Common Vulnerabilities and Exposures ID
    owasp_category: Optional[str] = None  # OWASP Top 10 category
    
    # Detection details
    detection_method: str = "pattern_matching"  # pattern_matching, ml_model, ast_analysis
    confidence: float = 0.0  # 0.0 to 1.0
    false_positive_probability: float = 0.0  # 0.0 to 1.0
    
    # Context and impact
    impact_description: Optional[str] = None
    attack_vector: Optional[str] = None
    prerequisites: List[str] = field(default_factory=list)
    
    # Remediation
    fix_suggestions: List[FixSuggestion] = field(default_factory=list)
    remediation_effort: str = "unknown"  # low, medium, high, unknown
    
    # Metadata
    detected_at: datetime = field(default_factory=datetime.now)
    scanner_version: str = "1.0.0"
    tags: List[str] = field(default_factory=list)
    
    # Additional context
    code_snippet: Optional[str] = None
    surrounding_context: Optional[str] = None
    related_vulnerabilities: List[str] = field(default_factory=list)
    
    def to_dict(self) -> Dict[str, Any]:
        """Convert vulnerability to dictionary for serialization."""
        return {
            "vulnerability_type": self.vulnerability_type.value,
            "severity": self.severity.value,
            "title": self.title,
            "description": self.description,
            "location": {
                "file_path": self.location.file_path,
                "line_number": self.location.line_number,
                "column_number": self.location.column_number,
                "function_name": self.location.function_name,
                "class_name": self.location.class_name
            },
            "cwe_id": self.cwe_id,
            "cve_id": self.cve_id,
            "owasp_category": self.owasp_category,
            "detection_method": self.detection_method,
            "confidence": self.confidence,
            "false_positive_probability": self.false_positive_probability,
            "impact_description": self.impact_description,
            "attack_vector": self.attack_vector,
            "prerequisites": self.prerequisites,
            "fix_suggestions": [
                {
                    "description": fix.description,
                    "code_example": fix.code_example,
                    "documentation_url": fix.documentation_url,
                    "confidence": fix.confidence
                }
                for fix in self.fix_suggestions
            ],
            "remediation_effort": self.remediation_effort,
            "detected_at": self.detected_at.isoformat(),
            "scanner_version": self.scanner_version,
            "tags": self.tags,
            "code_snippet": self.code_snippet,
            "surrounding_context": self.surrounding_context,
            "related_vulnerabilities": self.related_vulnerabilities
        }
    
    @classmethod
    def from_dict(cls, data: Dict[str, Any]) -> 'Vulnerability':
        """Create vulnerability from dictionary."""
        # Parse location
        location_data = data.get("location", {})
        location = CodeLocation(
            file_path=location_data.get("file_path", ""),
            line_number=location_data.get("line_number", 0),
            column_number=location_data.get("column_number", 0),
            function_name=location_data.get("function_name"),
            class_name=location_data.get("class_name")
        )
        
        # Parse fix suggestions
        fix_suggestions = []
        for fix_data in data.get("fix_suggestions", []):
            fix_suggestions.append(FixSuggestion(
                description=fix_data.get("description", ""),
                code_example=fix_data.get("code_example"),
                documentation_url=fix_data.get("documentation_url"),
                confidence=fix_data.get("confidence", 0.0)
            ))
        
        return cls(
            vulnerability_type=VulnerabilityType(data.get("vulnerability_type", "unknown")),
            severity=Severity(data.get("severity", "info")),
            title=data.get("title", ""),
            description=data.get("description", ""),
            location=location,
            cwe_id=data.get("cwe_id"),
            cve_id=data.get("cve_id"),
            owasp_category=data.get("owasp_category"),
            detection_method=data.get("detection_method", "pattern_matching"),
            confidence=data.get("confidence", 0.0),
            false_positive_probability=data.get("false_positive_probability", 0.0),
            impact_description=data.get("impact_description"),
            attack_vector=data.get("attack_vector"),
            prerequisites=data.get("prerequisites", []),
            fix_suggestions=fix_suggestions,
            remediation_effort=data.get("remediation_effort", "unknown"),
            detected_at=datetime.fromisoformat(data.get("detected_at", datetime.now().isoformat())),
            scanner_version=data.get("scanner_version", "1.0.0"),
            tags=data.get("tags", []),
            code_snippet=data.get("code_snippet"),
            surrounding_context=data.get("surrounding_context"),
            related_vulnerabilities=data.get("related_vulnerabilities", [])
        )
    
    def get_severity_score(self) -> int:
        """Get numeric severity score for sorting."""
        severity_scores = {
            Severity.CRITICAL: 5,
            Severity.HIGH: 4,
            Severity.MEDIUM: 3,
            Severity.LOW: 2,
            Severity.INFO: 1
        }
        return severity_scores.get(self.severity, 0)
    
    def is_high_priority(self) -> bool:
        """Check if vulnerability is high priority."""
        return self.severity in [Severity.CRITICAL, Severity.HIGH]
    
    def get_risk_score(self) -> float:
        """Calculate overall risk score based on severity and confidence."""
        severity_weights = {
            Severity.CRITICAL: 1.0,
            Severity.HIGH: 0.8,
            Severity.MEDIUM: 0.6,
            Severity.LOW: 0.4,
            Severity.INFO: 0.2
        }
        
        base_score = severity_weights.get(self.severity, 0.0)
        confidence_factor = self.confidence
        false_positive_factor = 1.0 - self.false_positive_probability
        
        return base_score * confidence_factor * false_positive_factor
